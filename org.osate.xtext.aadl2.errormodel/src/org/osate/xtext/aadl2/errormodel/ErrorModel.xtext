grammar org.osate.xtext.aadl2.errormodel.ErrorModel //with org.eclipse.xtext.common.Terminals
//with org.osate.xtext.aadl2.Aadl2
with org.osate.xtext.aadl2.properties.Properties

generate errorModel "http://www.osate.org/xtext/aadl2/errormodel/ErrorModel"

// this was an attempt to do the grammar against an existing ECore model, namely the one generated by Xtext
//import 'platform:/resource/org.osate.xtext.aadl2.errormodel/src/org/osate/xtext/aadl2/errormodel/ErrorModel.ecore'

import "platform:/resource/org.osate.aadl2/model/aadl2.ecore" as aadl2

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

//EM2AnnexClause returns EMAnnexClause:
//	'package' name=QPREF
//	(library+=ErrorModelLibrary )+//| subclause+=ErrorModelSubclause)+
ErrorModelGrammarRoot : 	 'library' eml=ErrorModelLibrary  
	| emsc=ErrorModelSubclause
;

AnnexLibrary returns aadl2::AnnexLibrary:
	 ErrorModelLibrary 
	 ;


AnnexSubclause returns aadl2::AnnexSubclause:
	 ErrorModelSubclause 
	 ;

NamedElement returns aadl2::NamedElement:
ErrorModelLibrary| 
ErrorTypes| ErrorBehaviorEvent | ErrorBehaviorState | ErrorBehaviorTransition
	 | ErrorPropagation 
	 | ErrorFlow
|ObservablePropagationConnection
	|TypeTransformationSet | TypeMappingSet  | ErrorBehaviorStateMachine
|ErrorDetection	| ErrorPropagations 	
;

ModalElement returns aadl2::ModalElement:
ErrorModelSubclause 
;

Element returns aadl2::Element:
ElementErrorType|TypeToken
|TypeTransformation|TypeMapping|ObservablePropagationConnections
|QualifiedObservableErrorPropagationPoint|TransitionBranch
|ConditionElement|ConnectionTransformation
|	ComponentErrorBehavior | CompositeErrorBehavior
|ConditionExpression|OrmoreExpression|OrlessExpression|OutgoingPropagationCondition
|CompositeState	
;


ErrorModelSubclause returns ErrorModelSubclause:
     {ErrorModelSubclause}//'{**' 
	    ( propagation=ErrorPropagations)?
	    (componentBehavior=ComponentErrorBehavior)?
		(compositeBehavior=CompositeErrorBehavior )?
		( observablePropagationConnections=ObservablePropagationConnections )?
		( connectionTransformation=ConnectionTransformation	)?
    ('properties'
 	(properties+=ContainedPropertyAssociation )+)?
//	'**}'
	 ;

ErrorModelLibrary returns ErrorModelLibrary:
	{ErrorModelLibrary}
  //    '{**' 
	(
    'error' 'types' 
    ('extends' extends+=[ErrorModelLibrary|QEMREF] (','extends+=[ErrorModelLibrary|QEMREF])*
    'with')?     
    ((types+=ErrorTypes))* 
    ('properties'
 	(properties+=ContainedPropertyAssociation )+)?
     'end' 'types' ';'
	)?
    (behaviors+=ErrorBehaviorStateMachine )*
	(mappings+=TypeMappingSet )* 
	(transformations+=TypeTransformationSet )*
//	'**}'
	 ;
	

ErrorTypes returns ErrorTypes:
	TypeDefinition | TypeSetDefinition | TypeAlias | TypeSetAlias
;

TypeDefinition returns ErrorType: 
    name=ID ':' 'type' 
      ( 'extends' superType=[ErrorType|QEMREF] )? 
    ';';

TypeAlias returns ErrorType: 
    name=ID 'renames' 'type' 
       aliasedType=[ErrorType|QEMREF]
      ';';


TypeSetDefinition returns TypeSet: 
     name=ID ':' 'type' 'set'
     '{' elementType+=ElementErrorType (',' elementType+=ElementErrorType)* '}'
          ';';


TypeSetConstructor returns TypeSet: 
     '{' elementType+=ElementErrorType (',' elementType+=ElementErrorType)* '}'
          ;

TypeSetReference returns TypeSet: 
     reference=[TypeSet|QEMREF] | TypeSetConstructor
          ;

  
TypeSetAlias returns TypeSet: 
     name=ID 'renames' 'type' 'set' aliasedType=[TypeSet|QEMREF]
      ';';
      
ElementErrorType returns TypeToken :
	type+=[ErrorType|QEMREF] ('+' type+=[ErrorType|QEMREF])*
;

NoError returns TypeSet:
	{TypeSet}
	'{' 'noerror' '}'
;

TypeToken returns TypeToken:
	{TypeToken}
     '{' type+=[ErrorType|QEMREF] ('+' type+=[ErrorType|QEMREF])* '}'
;

TypeTokenConstraint returns TypeSet:
	TypeSetReference
;

TypeTokenConstraintNoError returns TypeSet:
	TypeSetReference | NoError
;

TypeTransformationSet returns TypeTransformationSet: 
	'type' 'transformations' name=ID 
   ('use' 'types' useTypes+=[ErrorModelLibrary|QEMREF] (',' useTypes+=[ErrorModelLibrary|QEMREF] )* ';')?
      (( transformation+=ElementTypeTransformation )+|( transformation+=TypeTokenTransformation )+) 
      'end' 'transformations' ';'
          ;

TypeTransformation returns TypeTransformation:
	TypeTokenTransformation | ElementTypeTransformation
;

TypeTokenTransformation returns TypeTokenTransformation: 
	source=TypeTokenConstraintNoError '-[' contributor=TypeTokenConstraintNoError ']->' target=TypeToken ';'
          ;

ElementTypeTransformation returns ElementTypeTransformation: 
	source=[ErrorType|QEMREF] '-[' contributor=[ErrorType|QEMREF] ']->' target=[ErrorType|QEMREF] ';'
          ;


TypeMappingSet returns TypeMappingSet:
	'type' 'mappings' name=ID
   ('use' 'types' useTypes+=[ErrorModelLibrary|QEMREF] (',' useTypes+=[ErrorModelLibrary|QEMREF] )* ';')?
	((mapping+=TokenTypeMapping)+|(mapping+=ElementTypeMapping)+)
	'end' 'mappings' ';'
;

TypeMapping returns TypeMapping:
	TokenTypeMapping | ElementTypeMapping
;

TokenTypeMapping returns TokenTypeMapping:
	 source=TypeTokenConstraint '->' target=TypeToken ';'
;

ElementTypeMapping returns ElementTypeMapping:
	 source=[ErrorType|QEMREF] '->' target=[ErrorType|QEMREF] ';'
;

ErrorPropagations returns ErrorPropagations: 
   'error' 'propagations'
   {ErrorPropagations}
   ('use' 'types' useTypes+=[ErrorModelLibrary|QEMREF] (',' useTypes+=[ErrorModelLibrary|QEMREF] )* ';')?
   ('use' 'behavior' useBehavior=[ErrorBehaviorStateMachine|QEMREF] ';' )?
   (propagations+=ErrorPropagation)* 
   ( => 'flows'
   (flows+=ErrorFlow)+)? 
    ('properties'
 	(properties+=ContainedPropertyAssociation )+)?
   'end' 'propagations' ';'
   ;
   
ErrorPropagation returns ErrorPropagation:
	{ErrorPropagation}
   ( (observable?='observable' name=ID) | kind=PropagationKind | feature=[aadl2::Feature|ID]) 
   ':' (not?='not')? (direction=PropagationDirection)  
   'propagation' 
    typeSet=TypeSetReference
   ';';
   
PropagationDirection returns aadl2::DirectionType: 'in' | 'out' ;

PropagationKind  : ('processor'|'memory'|'bus'|'device'|'system'|('virtual' 'bus')|('virtual' 'processor')|'binding' | 'bindings'|'access'); // virtual bus, virtual processor

// enum does not work as  
//enum PropKind : PROCESSOR='processor'|MEMORY='memory'|BUS='bus'|DEVICE='device'|SYSTEM='system'
//	            |VIRTUALBUS='virtual bus'|VIRTUALPROCESSOR='virtual processor'|BINDING='binding' | BINDINGS='bindings'|ACCESS='access'
//;

  ErrorFlow returns ErrorFlow:
  ErrorSource | ErrorSink | ErrorPath; 

ErrorSource returns ErrorSource:
  name=ID ':' 'error' 'source' (outgoing=[ErrorPropagation|ErrorPropagationPoint]
  	|all?='all'
  ) (typeTokenConstraint=TypeTokenConstraint)?
  	('when' (( failureModeReference = [ErrorBehaviorStateOrTypeSet|ID] ( failureModeType = TypeSetConstructor )?) 
  		| (  failureModeType = TypeSetConstructor )
  	) )?
  ';';
 
ErrorBehaviorStateOrTypeSet: ErrorBehaviorState | TypeSetDefinition;

ErrorSink returns ErrorSink:
  name=ID ':' 'error' 'sink' incoming=[ErrorPropagation|ErrorPropagationPoint] (typeTokenConstraint=TypeTokenConstraint)?
  ';';

ErrorPath returns ErrorPath:
  name=ID ':' 'error' 'path' incoming=[ErrorPropagation|ErrorPropagationPoint] ( typeTokenConstraint=TypeTokenConstraint)? '->' (outgoing=[ErrorPropagation|ErrorPropagationPoint]|all?='all') 
  ( targetToken=TypeToken | 'mapping' typeMappingSet=[TypeMappingSet|QEMREF])?
  ';';

  
ErrorPropagationPoint :
   PropagationKind | ID  
   ;

ObservablePropagationConnections returns ObservablePropagationConnections:
	'observable' 'connections'
	( connection+=ObservablePropagationConnection)+
	'end' 'connections' ';'
;
   
ObservablePropagationConnection returns ObservablePropagationConnection:
   	name=ID ':' 'observable' source=QualifiedObservableErrorPropagationPoint '->' target=QualifiedObservableErrorPropagationPoint
   ;
  
QualifiedObservableErrorPropagationPoint returns QualifiedObservableErrorPropagationPoint:
   (subcomponent=[aadl2::Subcomponent|ID]  '.')? observablePoint=[ErrorPropagation|ErrorPropagationPoint]
   ;
   


ErrorBehaviorStateMachine returns ErrorBehaviorStateMachine: 
  'error' 'behavior' name=ID
  ( 'extends' extends=[ErrorBehaviorStateMachine|QEMREF] )?
   ('use' 'types' useTypes+=[ErrorModelLibrary|QEMREF] (',' useTypes+=[ErrorModelLibrary|QEMREF] )* ';')?
   ('use' 'transformations' useTransformation+=[TypeTransformationSet|QEMREF] ';')?
  ( 'events' (events+=ErrorBehaviorEvent )+ )?
  ( 'states' (states+=ErrorBehaviorState )+ )?
  ( 'transitions' (transitions+=ErrorBehaviorTransition )+ )?
    ('properties'
 	(properties+=ContainedPropertyAssociation )+)?
  'end' 'behavior' ';';
  
ErrorBehaviorEvent returns ErrorBehaviorEvent: 
  ErrorEvent | RepairEvent | RecoverEvent;
  
ErrorEvent returns ErrorEvent:
    name=ID ':' 'error' 'event' 
    (typeSet=TypeSetReference)?
    ('when' condition=STRING)?
    ';'; // add event condition 
    
RepairEvent returns RepairEvent:
    name=ID ':' 'repair' 'event' 
    ('when' condition=STRING)?
    ';'; //add repair initiator 
    
RecoverEvent returns RecoverEvent:
    name=ID ':' 'recover' 'event' 
    ('when' condition=STRING)?
    ';'; //add recover initiator 

ErrorBehaviorState returns ErrorBehaviorState: 
    name=ID ':' (intial?='initial')? 'state'
    (typeSet=TypeSetReference)?
    ';'  ;

ErrorBehaviorTransition returns ErrorBehaviorTransition:
  (name = ID ':')? 
  ((source=[ErrorBehaviorState|ID] (typeTokenConstraint=TypeTokenConstraint)?)
  	| all?='all')
   '-[' condition=ConditionExpression ']->' 
  (((target=[ErrorBehaviorState|ID] (targetToken=TypeToken )?)|mask?='mask')
  	| ('('destinationBranches+=TransitionBranch (',' destinationBranches+=TransitionBranch )+ ')'))
  ';';

TransitionBranch returns TransitionBranch:  
	((target=[ErrorBehaviorState|ID] (targetToken=TypeToken )?)| mask?='mask') 'with' value=BranchValue
;

BranchValue : 
  REAL_LIT | ID | 'others';


ConnectionTransformation returns ConnectionTransformation:
	'connections' 'use' 'transformations' typeTransformationSet=[TypeTransformationSet|QEMREF] ';'
;

EBSMUseContext returns EBSMUseContext:
	ComponentErrorBehavior | CompositeErrorBehavior | ErrorPropagations 
;

TypeUseContext returns TypeUseContext:
	TypeTransformationSet | TypeMappingSet |  ErrorBehaviorStateMachine //| ErrorPropagations 
	| EBSMUseContext
;

  
ComponentErrorBehavior returns ComponentErrorBehavior: 
	'component' 'error' 'behavior' 
	{ComponentErrorBehavior}
   ('use' 'types' useTypes+=[ErrorModelLibrary|QEMREF] (',' useTypes+=[ErrorModelLibrary|QEMREF] )* ';')?
   ('use' 'behavior' useBehavior=[ErrorBehaviorStateMachine|QEMREF] ';' )?
   ('use' 'transformations' useTransformation=[TypeTransformationSet|QEMREF] ';')?
  ( 'events' (events+=ErrorBehaviorEvent )+ )?
   (  'transitions' 
    ( transitions+=ErrorBehaviorTransition )+ )?
   (  'propagations'
    ( outgoingPropagationConditions+=OutgoingPropagationCondition )+ )?
   (  'detections'
    ( errorDetections+=ErrorDetection )+ )?
   (  'mode' 'mappings'
    ( errorStateToModeMappings+=ErrorStateToModeMapping )+ )?
  (  'properties' (properties+=ContainedPropertyAssociation )+ )?
   'end' 'component' ';'
;  
 
 
 // condition expression for component specific transitions 
 // based on error events and incoming propagations
ConditionExpression returns ConditionExpression:
  AndExpression ( {OrExpression.operands+=current} 'or' operands+=AndExpression)*;


AndExpression returns ConditionExpression:
  ConditionTerm ({AndExpression.operands+=current} 'and' operands+=ConditionTerm)*;
  
OrmoreExpression returns OrmoreExpression: 
	count=INTVALUE 'ormore' '(' operands+=ConditionElement
	            ( ',' operands+=ConditionElement)* ')'
;
  
OrlessExpression returns OrlessExpression: 
	count=INTVALUE 'orless' '(' operands+=ConditionElement
	            ( ',' operands+=ConditionElement)* ')'
;
  
ConditionTerm returns ConditionExpression:
	  ConditionElement
      |  OrmoreExpression 
      |  OrlessExpression 
      | '(' ConditionExpression ')'
  ;
  
ConditionElement returns ConditionElement:
  incoming=[EventOrPropagation|ErrorPropagationPoint] ( constraint=TypeTokenConstraintNoError )?
  ;

EventOrPropagation :
	ErrorBehaviorEvent | ErrorPropagation
;



OutgoingPropagationCondition returns OutgoingPropagationCondition: 
    (name = ID ':')? 
    ((state=[ErrorBehaviorState|ID] (typeTokenConstraint=TypeTokenConstraint)?)
    	| all?='all'
    )
	'-[' (condition=ConditionExpression)? ']->' 
	((outgoing=[ErrorPropagation|ErrorPropagationPoint] (typeToken=TypeToken)?)|((outgoing=[ErrorPropagation|ErrorPropagationPoint])? mask?='mask'))
	 ';'
;

  

ErrorDetection returns ErrorDetection: 
    (name = ID ':' )?
    ((state=[ErrorBehaviorState|ID] (typeTokenConstraint=TypeTokenConstraint)?)|
    	all?='all'
    )
	'-[' (condition=ConditionExpression)? ']->' 
	( internalDetectionPort=InternalPort| detectionReportingPort=[aadl2::Port|ID] )
	(errorCode=ErrorCodeValue)?
	';' 
;

ErrorCodeValue returns ErrorCodeValue:
	intValue=INTEGER_LIT | constant=[aadl2::PropertyConstant|QPREF] | enumLiteral=STRING
;

ErrorStateToModeMapping returns ErrorStateToModeMapping:
	errorState=[ErrorBehaviorState|ID] 'in' 'modes' '('
	mappedModes+=[aadl2::Mode|ID] (',' mappedModes+=[aadl2::Mode|ID] )* ')' ';'
;


InternalPort returns aadl2::InternalEvent:
	 'self' '.' name=ID
;

CompositeErrorBehavior returns CompositeErrorBehavior: 
	'composite' 'error' 'behavior' 
	{CompositeErrorBehavior}
   ('use' 'types' useTypes+=[ErrorModelLibrary|QEMREF] (',' useTypes+=[ErrorModelLibrary|QEMREF] )* ';')?
   ('use' 'behavior' useBehavior=[ErrorBehaviorStateMachine|QEMREF] ';' )?
   ( 'states' 
    ( states+=CompositeState )+ 
    )?
  (  'properties' (properties+=ContainedPropertyAssociation )+ )?
   'end' 'composite' ';'
; 

CompositeState returns CompositeState:
	'[' (condition=SConditionExpression | others?='others') ']->' state=[ErrorBehaviorState|ID] (typedToken=TypeToken)?';';

  
// condition expressions for composite states
// based on states only  
SConditionExpression returns ConditionExpression:
  SAndExpression ( {SOrExpression.operands+=current} 'or' operands+=SAndExpression)*;


SAndExpression returns ConditionExpression:
  SConditionTerm ({SAndExpression.operands+=current} 'and' operands+=SConditionTerm)*;
  
SOrmoreExpression returns OrmoreExpression: 
	count=INTVALUE 'ormore' '(' operands+=SConditionElement
	            ( ',' operands+=SConditionElement)* ')'
;
  
SOrlessExpression returns OrlessExpression: 
	count=INTVALUE 'orless' '(' operands+=SConditionElement
	            ( ',' operands+=SConditionElement)* ')'
;
  
SConditionTerm returns ConditionExpression:
	  SConditionElement
      |  SOrmoreExpression 
      |  SOrlessExpression 
      | '(' SConditionExpression ')'
  ;

  
SConditionElement returns ConditionElement:
	(subcomponents+=SubcomponentElement '.')+ reference=[ErrorBehaviorState|ID] (constraint=TypeTokenConstraint)?
;

SubcomponentElement returns SubcomponentElement:
	subcomponent = [aadl2::Subcomponent|ID]
;


terminal SL_COMMENT:
	'--' !('\n' | '\r')* ('\r'? '\n')?;



terminal INTEGER_LIT : ('0'..'9')+;


QEMREF:
	 (ID '::')* ID ;//('.' ID )?;


