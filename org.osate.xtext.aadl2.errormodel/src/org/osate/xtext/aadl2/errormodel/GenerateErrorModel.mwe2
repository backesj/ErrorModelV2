module org.osate.xtext.aadl2.errormodel.ErrorModel

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/org/osate/xtext/aadl2/errormodel/ErrorModel.xtext"
var file.extensions = "aaem"
var projectName = "org.osate.xtext.aadl2.errormodel"
var runtimeProject = "../${projectName}"

Workflow {
    bean = StandaloneSetup {
	    scanClassPath = true
		platformUri = "${runtimeProject}/.."
		registerGenModelFile = "platform:/resource/org.osate.aadl2/model/aadl2-nouml.genmodel"
//		registerGenModelFile = "platform:/resource/org.osate.xtext.aadl2.errormodel/src/org/osate/xtext/aadl2/errormodel/ErrorModel.genmodel"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"
//		pathTestProject = "${runtimeProject}.test"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		language = {
			uri = grammarURI
			fileExtensions = file.extensions

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment {}

			// generates Java API for the generated EPackages 
			fragment = ecore.EcoreGeneratorFragment {
			}

//			// the serialization component
//			fragment = parseTreeConstructor.ParseTreeConstructorFragment {}
            // Serializer 2.0
            fragment = serializer.SerializerFragment {}

			// a custom ResourceFactory for use with EMF 
			fragment = resourceFactory.ResourceFactoryFragment {
				fileExtensions = file.extensions
			}

			// The antlr parser generator fragment.
//			fragment = parser.antlr.XtextAntlrGeneratorFragment {
//			//  options = {
//			//		backtrack = true
//			//	}
//			}
			fragment = parser.antlr.ex.rt.AntlrGeneratorFragment {
    		options = {
        		ignoreCase = true
//				backtrack = true
				classSplitting = true
    			}
			}
			
			// java-based API for validation 
			fragment = validation.JavaValidatorFragment {
//				composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
//				composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
				// registerForImportedPackages = true
			}

			// scoping and exporting API
			// fragment = scoping.ImportURIScopingFragment {}
//			 fragment = exporting.SimpleNamesFragment {}

			// scoping and exporting API 
			fragment = scoping.ImportNamespacesScopingFragment {}
			fragment = exporting.QualifiedNamesFragment {}
			fragment = builder.BuilderIntegrationFragment {}

//			// generator API
//			fragment = generator.GeneratorFragment {
//				generateMwe = true
//				generateJavaMain = true
//			}
			
			// formatter API 
			fragment = formatting.FormatterFragment {}

			// labeling API 
			fragment = labeling.LabelProviderFragment {}

			// outline API 
			fragment = outline.OutlineTreeProviderFragment {}
			fragment = outline.QuickOutlineFragment {}

			// quickfix API 
			fragment = quickfix.QuickfixProviderFragment {}

			// content assist API  
			fragment = contentAssist.JavaBasedContentAssistFragment {}
			
			// rename refactoring  
			fragment = refactoring.RefactorElementNameFragment {}

			// generates a more lightweight Antlr parser and lexer tailored for content assist  
//			fragment = parser.antlr.XtextAntlrUiGeneratorFragment {}
			fragment = parser.antlr.ex.ca.ContentAssistParserGeneratorFragment {
				options = {
        			ignoreCase = true
//        			backtrack=true
					classSplitting = true
				}
			}

			// generates junit test support classes into Generator#pathTestProject
//			fragment = junit.Junit4Fragment {}

			// project wizard (optional) 
			// fragment = projectWizard.SimpleProjectWizardFragment {
			// 		generatorProjectName = "${projectName}.generator" 
			//		modelFileExtension = file.extensions
			// }
			
			//fragment = types.TypesGeneratorFragment {}
			// generates the required bindings only if the grammar inherits from Xbase
			//fragment = xbase.XbaseGeneratorFragment {}
		}
	}
}
